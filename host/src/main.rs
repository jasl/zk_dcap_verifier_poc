// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    GUEST_FOR_ZK_DCAP_VERIFIER_ELF, GUEST_FOR_ZK_DCAP_VERIFIER_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv, Receipt};

use std::time::SystemTime;
use chrono::{DateTime, Utc};
use primitive_io::{Inputs, Outputs};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // Mock data
    let now = 1699301000u64;
    let quote = include_bytes!("../../res/dcap_quote").to_vec();
    let quote_collateral = include_bytes!("../../res/dcap_quote_collateral").to_vec();

    let input = Inputs {
        now,
        quote,
        quote_collateral,
    };
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    let current_time = SystemTime::now();
    let current_time = DateTime::<Utc>::from(current_time);
    let current_time_str = current_time.format("%Y-%m-%d %H:%M:%S.%f").to_string();
    println!{"Started at {}", current_time_str};

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover
        .prove(env, GUEST_FOR_ZK_DCAP_VERIFIER_ELF)
        .unwrap();

    let current_time = SystemTime::now();
    let current_time = DateTime::<Utc>::from(current_time);
    let current_time_str = current_time.format("%Y-%m-%d %H:%M:%S.%f").to_string();
    println!{"Finished at {}", current_time_str};

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let output: Outputs = receipt.journal.decode().unwrap();
    println!("Report data: {}", hex::encode(&output.report_data));
    println!("MR Enclave: {}", hex::encode(&output.mr_enclave));
    println!("MR Signer: {}", hex::encode(&output.mr_signer));
    println!("ISV Prod Id: {}", output.isv_prod_id);
    println!("ISV SVN: {}", output.isv_svn);
    println!("TCB status: {}", output.tcb_status);
    println!("Advisory IDs: {}", output.advisory_ids.join(", "));

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    // receipt
    //     .verify(GUEST_FOR_ZK_DCAP_VERIFIER_ID)
    //     .unwrap();

    let mut encoded_receipt = Vec::new();
    ciborium::ser::into_writer(&receipt, &mut encoded_receipt).unwrap();

    println!("Receipt size: {} bytes", encoded_receipt.len());
    // println!("Receipt: {}", hex::encode(&encoded_receipt));
    // std::fs::write(
    //     "receipt",
    //     &encoded_receipt
    // ).unwrap();

    let decoded_receipt: Receipt = ciborium::de::from_reader(&encoded_receipt[..]).unwrap();
    decoded_receipt
        .verify(GUEST_FOR_ZK_DCAP_VERIFIER_ID)
        .unwrap();
}
