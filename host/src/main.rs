// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    GUEST_FOR_ZK_DCAP_VERIFIER_ELF, GUEST_FOR_ZK_DCAP_VERIFIER_ID
};
use risc0_zkvm::{
    get_prover_server, default_prover,
    recursion::identity_p254,
    CompactReceipt, ExecutorEnv, InnerReceipt, ProverOpts, Receipt,
};
use risc0_groth16::docker::stark_to_snark;

use std::time::SystemTime;
use chrono::{DateTime, Utc};
use primitive_io::{Inputs, Outputs};

fn print_current_time(tag: &str) {
    let current_time = SystemTime::now();
    let current_time = DateTime::<Utc>::from(current_time);
    let current_time_str = current_time.format("%Y-%m-%d %H:%M:%S.%f").to_string();
    println!{"{} at {}", tag, current_time_str};
}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // Mock data
    let now = 1699301000u64;
    let quote = include_bytes!("../../res/dcap_quote").to_vec();
    let quote_collateral = include_bytes!("../../res/dcap_quote_collateral").to_vec();

    let input = Inputs {
        now,
        quote,
        quote_collateral,
    };
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    print_current_time("Prove started");

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover
        .prove(env, GUEST_FOR_ZK_DCAP_VERIFIER_ELF)
        .unwrap();

    print_current_time("Prove finished");

    let output: Outputs = receipt.journal.decode().unwrap();
    println!();
    println!("Report data: {}", hex::encode(&output.report_data));
    println!("MR Enclave: {}", hex::encode(&output.mr_enclave));
    println!("MR Signer: {}", hex::encode(&output.mr_signer));
    println!("ISV Prod Id: {}", output.isv_prod_id);
    println!("ISV SVN: {}", output.isv_svn);
    println!("TCB status: {}", output.tcb_status);
    println!("Advisory IDs: {}", output.advisory_ids.join(", "));
    println!();

    // Simulate dump the receipt
    let mut encoded_receipt = Vec::new();
    ciborium::ser::into_writer(&receipt, &mut encoded_receipt).unwrap();

    // https://github.com/risc0/risc0/tree/main/risc0/groth16

    // Obtain a prover.
    let opts = ProverOpts::default();
    let prover = get_prover_server(&opts).unwrap();

    // Simulate load the dumped receipt
    let decoded_receipt: Receipt = ciborium::de::from_reader(&encoded_receipt[..]).unwrap();
    decoded_receipt
        .verify(GUEST_FOR_ZK_DCAP_VERIFIER_ID)
        .unwrap();

    let claim = decoded_receipt.get_claim().unwrap();
    // Will panic when `RISC0_DEV_MODE=1`
    let composite_receipt = decoded_receipt.inner.composite().unwrap();
    let succinct_receipt = prover.compress(composite_receipt).unwrap();
    let journal = decoded_receipt.journal.bytes;

    let ident_receipt = identity_p254(&succinct_receipt).unwrap();
    let seal_bytes = ident_receipt.get_seal_bytes();

    print_current_time("Stark-to-Snark started");

    // Only support x86
    let seal = stark_to_snark(&seal_bytes).unwrap().to_vec();

    print_current_time("Stark-to-Snark finished");

    let receipt = Receipt::new(
        InnerReceipt::Compact(CompactReceipt { seal, claim }),
        journal,
    );

    receipt.verify(GUEST_FOR_ZK_DCAP_VERIFIER_ID).unwrap();

    // Simulate dump the receipt
    let mut encoded_receipt = Vec::new();
    ciborium::ser::into_writer(&receipt, &mut encoded_receipt).unwrap();

    println!("Receipt size: {} bytes", encoded_receipt.len());
    // println!("Receipt: {}", hex::encode(&encoded_receipt));
    std::fs::write("tmp/receipt", &encoded_receipt).unwrap();

    // Simulate load the dumped receipt
    let decoded_receipt: Receipt = ciborium::de::from_reader(&encoded_receipt[..]).unwrap();
    decoded_receipt
        .verify(GUEST_FOR_ZK_DCAP_VERIFIER_ID)
        .unwrap();
}
